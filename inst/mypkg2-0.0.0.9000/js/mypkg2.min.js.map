{"version":3,"sources":["init.js","widgets.js"],"names":["$","document","ready","config","find","JSON","parse","html","root","methods","toggleDarkTheme","this","toggleClass","data","gauge","app","Framework7","views","create","on","event","Shiny","shinyapp","onDisconnected","length","body","append","reconnectToast","toast","position","text","open","css","close","deferredPrompt","installToast","window","e","preventDefault","originalEvent","utils","nextTick","prompt","userChoice","then","result","console","log","dialog","alert","hasOwnProperty","touch","tapHold","prop","appendTo","colorCSS","colorThemeCSSProperties","color","filled","dark","uiWidgets","widgets","concat","activateWidget","widget","indexOf","each","$el","attr","el","w","addCustomMessageHandler","message","undefined","id","opened","setInputValue","closed","forEach","instanceFamily","property","oldInstance","oldConfig","params","newConfig","extend","options","destroy","newInstance"],"mappings":"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","file":"mypkg2.min.js","sourceRoot":"../../mypkg2-build","sourcesContent":["$( document ).ready(function() {\n // collect all data elements stored in body\n var config = $(document).find(\"script[data-for='app']\");\n config = JSON.parse(config.html());\n\n // always erase existing root value just in case the user changes the root.\n // This may be harmful\n config.root = \"#app\";\n\n  // store app methods\n  config.methods =  {\n    toggleDarkTheme: function() {\n      var self = this;\n      var $html = self.$(\"html\");\n      $html.toggleClass(\"theme-dark\");\n    }\n  };\n\n  // Service worker registration\n  //config.serviceWorker = {\n  //    path: window.location.pathname + 'service-worker.js',\n  //    scope: window.location.pathname\n  //};\n\n  // Widgets cache\n  config.data = function() {\n    return {\n      // any other widget type to cache ...\n      gauge: []\n    };\n  };\n\n  // create app instance\n  var app = new Framework7(config);\n\n  // init main view\n  var mainView = app.views.create('.view-main');\n\n  // Custom disconnect screen\n  $(document).on(\"shiny:connected\", function(event) {\n    Shiny.shinyapp.onDisconnected = function() {\n      // Add gray-out overlay, if not already present\n      var $overlay = $('#shiny-disconnected-overlay');\n      if ($overlay.length === 0) {\n        $(document.body).append('<div id=\"shiny-disconnected-overlay\"></div>');\n      }\n    };\n  });\n\n  $(document).on(\"shiny:disconnected\", function(event) {\n    var reconnectToast = app.toast\n      .create({\n        position: \"center\",\n        text:\n          'Oups... disconnected </br> </br> <div class=\"row\"><button onclick=\"Shiny.shinyapp.reconnect();\" class=\"toast-button button color-green col\">Reconnect</button><button onclick=\"location.reload();\" class=\"toast-button button color-red col\">Reload</button></div>'\n      })\n      .open();\n\n    $('.toast').css(\"background-color\", \"#1c1c1d\");\n\n    // close toast whenever a choice is made ...\n    $(\".toast-button\").on(\"click\", function() {\n      reconnectToast.close();\n    });\n  });\n\n\n  // Create custom install UI\n  var installToast = app.toast.create({\n    position: 'center',\n    text: '<button id=\"install-button\" class=\"toast-button button color-green\">Install</button>',\n  });\n\n  var deferredPrompt;\n  // Handle install event\n  $(window).on('beforeinstallprompt', (e) => {\n    // Prevent Chrome 67 and earlier from automatically showing the prompt\n    e.preventDefault();\n    // Stash the event so it can be triggered later.\n    deferredPrompt = e.originalEvent;\n    // Show install trigger\n    installToast.open();\n  });\n\n  // Installation must be done by a user gesture!\n  // close toast whenever a choice is made ... Give time\n  // to the toast to be created before event registration.\n  app.utils.nextTick(function() {\n    $('#install-button').on('click', function() {\n      // close install toast\n      installToast.close();\n      if (!deferredPrompt) {\n        // The deferred prompt isn't available.\n        return;\n      }\n      // Show the install prompt.\n      deferredPrompt.prompt();\n      // Log the result\n      deferredPrompt.userChoice.then((result) => {\n        console.log('üëç', 'userChoice', result);\n        // Reset the deferred prompt variable, since\n        // prompt() can only be called once.\n        deferredPrompt = null;\n      });\n    });\n  }, 500);\n\n  //var notification = app.notification.create({\n  //  text: 'Hello, how are you?',\n  //  on: {\n  //    opened: function () {\n  //      console.log('Notification opened');\n  //    }\n  //  }\n  //}).open();\n\n  // equivalent to setTimeout ...\n  //app.utils.nextTick(function() {\n  //  var otherMessage = app.notification.create({\n  //    text: 'You look great!'\n  //  }).open();\n  //}, 2000);\n\n  // taphold test\n  $('#mybutton').on('taphold', function () {\n    app.dialog.alert('Tap hold fired!');\n  });\n\n\n  // tapHold custom css\n  if (config.hasOwnProperty(\"touch\")) {\n    if (config.touch.tapHold) {\n      $(\"<style>\")\n        .prop(\"type\", \"text/css\")\n        .html(\n          `\n          -moz-user-select: none;\n          -webkit-user-select: none;\n          user-select: none;`\n        )\n        .appendTo(\"head\");\n    }\n  }\n\n  // Set color theme\n  if (config.hasOwnProperty('color')) {\n    var colorCSS = app.utils.colorThemeCSSProperties(config.color);\n    $('<style>')\n      .prop('type', 'text/css')\n      .html(`:root {\n        --f7-theme-color: ${colorCSS[\"--f7-theme-color\"]};\n        --f7-theme-color-rgb: ${colorCSS[\"--f7-theme-color-rgb\"]};\n        --f7-theme-color-shade: ${colorCSS[\"--f7-theme-color-shade\"]};\n        --f7-theme-color-tint: ${colorCSS[\"--f7-theme-color-tint\"]};\n      }`)\n      .appendTo(\"head\");\n  }\n\n  // Filled theme\n  if (!config.hasOwnProperty('filled')) config.filled = false;\n  if (config.filled) {\n    var filledCSS = `\n      :root,\n      :root.theme-dark,\n      :root .theme-dark {\n        --f7-bars-bg-color: var(--f7-theme-color);\n        --f7-bars-bg-color-rgb: var(--f7-theme-color-rgb);\n        --f7-bars-translucent-opacity: 0.9;\n        --f7-bars-text-color: #fff;\n        --f7-bars-link-color: #fff;\n        --f7-navbar-subtitle-text-color: rgba(255,255,255,0.85);\n        --f7-bars-border-color: transparent;\n        --f7-tabbar-link-active-color: #fff;\n        --f7-tabbar-link-inactive-color: rgba(255,255,255,0.54);\n        --f7-sheet-border-color: transparent;\n        --f7-tabbar-link-active-border-color: #fff;\n      }\n      .appbar,\n      .navbar,\n      .toolbar,\n      .subnavbar,\n      .calendar-header,\n      .calendar-footer {\n        --f7-touch-ripple-color: var(--f7-touch-ripple-white);\n        --f7-link-highlight-color: var(--f7-link-highlight-white);\n        --f7-button-text-color: #fff;\n        --f7-button-pressed-bg-color: rgba(255,255,255,0.1);\n      }\n      .navbar-large-transparent,\n      .navbar-large.navbar-transparent {\n        --f7-navbar-large-title-text-color: #000;\n\n        --r: 0;\n        --g: 122;\n        --b: 255;\n        --progress: var(--f7-navbar-large-collapse-progress);\n        --f7-bars-link-color: rgb(\n          calc(var(--r) + (255 - var(--r)) * var(--progress)),\n          calc(var(--g) + (255 - var(--g)) * var(--progress)),\n          calc(var(--b) + (255 - var(--b)) * var(--progress))\n        );\n      }\n      .theme-dark .navbar-large-transparent,\n      .theme-dark .navbar-large.navbar-transparent {\n        --f7-navbar-large-title-text-color: #fff;\n    }`;\n\n    $('<style>')\n      .prop('type', 'text/css')\n      .html(`${filledCSS}`)\n      .appendTo(\"head\");\n  }\n\n  // dark mode\n  if (!config.hasOwnProperty('dark')) config.dark = false;\n  if (config.dark) {\n    app.methods.toggleDarkTheme();\n  }\n});\n\n// exports\nexport {app, config};","import { app } from 'init.js';\n\n$( document ).ready(function() {\n  const uiWidgets = [\"gauge\", \"swiper\", \"searchbar\"];\n  const serverWidgets = [\"toast\", \"photoBrowser\", \"notification\"];\n  const widgets = uiWidgets.concat(serverWidgets);\n\n  // Instantiate a widget\n  activateWidget = function(widget) {\n    // Handle ui side widgets\n    if (uiWidgets.indexOf(widget) > -1) {\n      $(\".\" + widget).each(function() {\n        var $el = $(this);\n        var config = $(document).find(\n          \"script[data-for='\" + $el.attr(\"id\") + \"']\"\n        );\n        config = JSON.parse(config.html());\n        // add the id\n        config.el = '#' + $el.attr(\"id\");\n\n        // feed the create method\n        var w = app[widget].create(config);\n        // Store the widget instance in the app data cache\n        app.data[widget][$el.attr(\"id\")] = w;\n      });\n    } else {\n      // This concerns toasts, notifications, photoBrowser, ...\n      // that don't have any UI element in the DOM before creating\n      // the widget instance.\n      Shiny.addCustomMessageHandler(widget, function(message) {\n\n        // Let shiny lnow about the widget state\n        if (message.id !== undefined) {\n          message.on = {\n            opened: function() {\n              Shiny.setInputValue(message.id, true);\n            },\n            closed: function() {\n              Shiny.setInputValue(message.id, false);\n            }\n          };\n        }\n\n        var w = app[widget].create(message);\n        w.open();\n      });\n    }\n  };\n\n  // Loop over all widgets to activate them\n  widgets.forEach(function(w) {\n    activateWidget(w);\n  });\n\n\n  // Update widget instances\n  Shiny.addCustomMessageHandler('update-instance', function(message) {\n    // Recover in which array is stored the given instance.\n    // Uniqueness is ensured since HTML id are supposed to be unique.\n    var instanceFamily;\n    for (const property in app.data) {\n      for (const e in app.data[property]) {\n        if (e === message.id) {\n          instanceFamily = property;\n        }\n      }\n    }\n\n    var oldInstance = app.data[instanceFamily][message.id];\n    var oldConfig = oldInstance.params;\n    var newConfig = app.utils.extend(oldConfig,  message.options);\n\n    // Destroy old instance\n    oldInstance.destroy();\n    // Create new config\n    var newInstance = app[instanceFamily].create(newConfig);\n    // Update app data\n    app.data[instanceFamily][message.id] = newInstance;\n  });\n\n});"]}
